/*using System;
using Bitverse.Unity.Gui;
using UnityEditor;
using UnityEngine;
using Object = UnityEngine.Object;


public partial class BitControlEditor : Editor
{
	private enum Corner
	{
		None,
		Top,
		Left,
		Bottom,
		Right,
		TopLeft,
		TopRight,
		BottomLeft,
		BottomRight
	}


	//private VirtualMenu menu;

	//public void Awake()
	//{

	//    menu = new VirtualMenu();
	//    menu.Add(new VirtualMenu.VirtualButton("Teste", 200, 20, Callback));
	//    menu.Add(new VirtualMenu.VirtualButton("Outro", 200, 20, Callback));
	//}

	private BitControl _underMouse;
	public static bool SnapToGrid = true;
	public static Vector2 Grid = new Vector2(4, 4);
	public Vector2 MouseDownPosition;
	private Corner _mouseCorner = Corner.None;
	private Rect _originalPosition;
	private bool _snapToControls = true;
	private Vector3 _line1P1 = Vector3.zero;
	private Vector3 _line1P2 = Vector3.zero;
	private Vector3 _line2P1 = Vector3.zero;
	private Vector3 _line2P2 = Vector3.zero;
	private static bool _delayedMouseDown;

	public static bool DrawPadding;
	public static bool DrawMargin;
	private static Color _lineColor = new Color(1f, 0f, 0f, 0.4f);


	public void OnSceneGUI()
	{
		if (_delayedMouseDown)
		{
			if (BitGuiEditorToolbox.ControlTypeToCreate != null)
			{
				Point mousePosition = GetMousePosition();
				if (_underMouse is BitContainer)
					BitGuiEditorToolbox.CreateComponent((BitContainer)_underMouse, mousePosition);
				BitGuiEditorToolbox.ControlTypeToCreate = null;
			}
		}

		//menu.ShowMenu(-300, 0);

		if (target == null)
			return;
		BitControl c = (BitControl)target;
		Handles.BeginGUI();
		Rect r = ToGuiRect(c.AbsolutePosition);
		float rm = 6;
		float rmh = rm / 2;
		Corner corner = Corner.None;
		corner = CornerStuff(corner, Corner.TopLeft, new Rect(r.xMin - rmh, r.yMin - rmh, rm, rm), MouseCursor.ResizeUpLeft);
		corner = CornerStuff(corner, Corner.TopRight, new Rect(r.xMax - rmh, r.yMin - rmh, rm, rm), MouseCursor.ResizeUpRight);
		corner = CornerStuff(corner, Corner.BottomRight, new Rect(r.xMax - rmh, r.yMax - rmh, rm, rm), MouseCursor.ResizeUpLeft);
		corner = CornerStuff(corner, Corner.BottomLeft, new Rect(r.xMin - rmh, r.yMax - rmh, rm, rm), MouseCursor.ResizeUpRight);

		corner = CornerStuff(corner, Corner.Left, new Rect(r.xMin - rmh, r.yMin + rmh, rm, r.height - rm), MouseCursor.ResizeHorizontal);
		corner = CornerStuff(corner, Corner.Right, new Rect(r.xMax - rmh, r.yMin + rmh, rm, r.height - rm), MouseCursor.ResizeHorizontal);
		corner = CornerStuff(corner, Corner.Top, new Rect(r.xMin + rmh, r.yMin - rmh, r.width - rm, rm), MouseCursor.ResizeVertical);
		corner = CornerStuff(corner, Corner.Bottom, new Rect(r.xMin + rmh, r.yMax - rmh, r.width - rm, rm), MouseCursor.ResizeVertical);
		Handles.EndGUI();

		Object[] comps = FindObjectsOfType(typeof(BitControl));

		BitControl compUnderMouse = GetCompUnderMouse(comps);

		if (Event.current.type == EventType.MouseUp)
		{
			_line1P1 = _line1P2 = _line2P1 = _line2P2 = new Vector3(10000, 10000, 10000);
			c.Size = c.Size;
		}
		if (_delayedMouseDown)
		{
			_mouseCorner = corner;
			_originalPosition = c.AbsolutePosition;
			//Debug.Log("a = " + _originalPosition);
		}


		if (Event.current.type == EventType.KeyDown)
			if (Event.current.keyCode == KeyCode.LeftControl)
				_snapToControls = false;
		if (Event.current.type == EventType.KeyUp)
			if (Event.current.keyCode == KeyCode.LeftControl)
				_snapToControls = true;
		if (Event.current.type == EventType.MouseMove)
		{
			//BitControl n = GetCompUnderMouse(comps);
			if (compUnderMouse != _underMouse)
			{
				_underMouse = compUnderMouse;
				if (_underMouse != null)
					EditorUtility.SetDirty(_underMouse);
			}
		}

		if (corner == Corner.None && _delayedMouseDown && Event.current.button == 0)
		{
			//BitControl best = GetCompUnderMouse(comps);
			if (compUnderMouse != null && compUnderMouse != c)
			{
				Selection.activeGameObject = compUnderMouse.gameObject;
				return;
			}
			if (compUnderMouse == null)
			{
				Selection.activeGameObject = c.gameObject;
			}
		}
		_delayedMouseDown = false;
		if (Event.current.type == EventType.MouseDown)
		{
			_delayedMouseDown = true;
			//BitControl best = GetCompUnderMouse(comps);
			if (compUnderMouse != null && corner == Corner.None)
			{
				_originalPosition = compUnderMouse.AbsolutePosition;
			}
		}

		Vector3 op = new Vector3(_originalPosition.x, 0, _originalPosition.y);
		Undo.ClearSnapshotTarget();
		Vector3 pos = Handles.FreeMoveHandle(op, Quaternion.identity, 10000, new Vector3(1, 1, 1), Handles.RectangleCap);
		Handles.color = Color.yellow;
		Handles.DrawLine(op, pos);
		Handles.DrawLine(op - 4 * Vector3.forward, op + 4 * Vector3.forward);
		Handles.DrawLine(op - 4 * Vector3.right, op + 4 * Vector3.right);
		Handles.DrawLine(pos - 4 * Vector3.forward, pos + 4 * Vector3.forward);
		Handles.DrawLine(pos - 4 * Vector3.right, pos + 4 * Vector3.right);

		if (op != pos)
		{
			pos = DoSnapping(pos, c, comps, _mouseCorner);
			Vector3 dif = pos - op;

			switch (_mouseCorner)
			{
				case Corner.None:
					c.AbsolutePosition = new Rect(dif.x + _originalPosition.x, dif.z + _originalPosition.y, _originalPosition.width, _originalPosition.height);
					break;
				case Corner.Right:
					c.Size = new Size(dif.x + _originalPosition.width, _originalPosition.height);
					break;
				case Corner.Left:
					c.AbsolutePosition = new Rect(dif.x + _originalPosition.x, _originalPosition.y, _originalPosition.width - dif.x, c.Size.Height);
					break;
				case Corner.Bottom:
					c.Size = new Size(_originalPosition.width, dif.z + _originalPosition.height);
					break;
				case Corner.Top:
					c.AbsolutePosition = new Rect(_originalPosition.x, dif.z + _originalPosition.y, c.Size.Width, -dif.z + _originalPosition.height);
					break;
				case Corner.BottomRight:
					c.Size = new Size(dif.x + _originalPosition.width, dif.z + _originalPosition.height);
					break;
				case Corner.TopLeft:
					c.AbsolutePosition = new Rect(dif.x + _originalPosition.x, dif.z + _originalPosition.y, -dif.x + _originalPosition.width, -dif.z + _originalPosition.height);
					break;
				case Corner.TopRight:
					c.AbsolutePosition = new Rect(_originalPosition.x, dif.z + _originalPosition.y, dif.x + _originalPosition.width, -dif.z + _originalPosition.height);
					break;
				case Corner.BottomLeft:
					c.AbsolutePosition = new Rect(dif.x + _originalPosition.x, _originalPosition.y, -dif.x + _originalPosition.width, dif.z + _originalPosition.height);
					break;
			}
			if (GUI.changed)
				EditorUtility.SetDirty(target);
		}

		foreach (BitControl comp in comps)
		{
			if (comp.Style != null)
			{
				Rect rect = comp.AbsolutePosition;
				if (DrawPadding)
				{
					RectOffset border = comp.Style.padding;
					DrawBorder(new Color(1f, 1f, 0f, 0.2f), new Rect(rect.x + border.left, rect.y + border.top, rect.width - border.right - border.left, rect.height - border.bottom - border.top));
				}
				if (DrawMargin)
				{
					RectOffset border = comp.Style.margin;
					DrawBorder(new Color(0f, 1f, 1f, 0.2f), new Rect(rect.x - border.left, rect.y - border.top, rect.width + border.right + border.left, rect.height + border.bottom + border.top));
				}
			}

			if (comp == _underMouse)
			{
				DrawBorder(Color.yellow, comp.AbsolutePosition);
			}
			if (comp == c)
			{
				DrawBorder(Color.blue, comp.AbsolutePosition);
			}
			else
			{
				EditorGUIUtility.AddCursorRect(ToGuiRect(comp.AbsolutePosition), MouseCursor.Link);
			}

			Handles.color = Color.white;
			Handles.Label(new Vector3(comp.AbsolutePosition.x, 0, comp.AbsolutePosition.y), comp.gameObject.name);
		}
		Handles.color = _lineColor;
		Handles.DrawLine(_line1P1, _line1P2);
		Handles.DrawLine(_line2P1, _line2P2);
	}

	private static Point GetMousePosition()
	{
		Ray raio = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
		return new Point(raio.origin.x, raio.origin.z);
	}

	private Vector3 DoSnapping(Vector3 pos, BitControl control, object[] comps, Corner corner)
	{
		Vector3 changedPos = pos;
		float bestx = float.MaxValue;
		float besty = float.MaxValue;
		if (_snapToControls)
		{
			foreach (BitControl comp in comps)
			{
				if (comp == control)
					continue;
				float dif;
				if (corner == Corner.Left || corner == Corner.None || corner == Corner.TopLeft || corner == Corner.BottomLeft)
				{
					float delta = Math.Abs(comp.AbsolutePosition.x - pos.x);
					if (delta < 10 && delta < bestx)
					{
						changedPos.x = comp.AbsolutePosition.x;
						bestx = delta;
						_line1P1 = new Vector3(changedPos.x, 0, Math.Min(comp.AbsolutePosition.yMin, control.AbsolutePosition.yMin));
						_line1P2 = new Vector3(changedPos.x, 0, Math.Max(comp.AbsolutePosition.yMax, control.AbsolutePosition.yMax));
					}
				}
				if (corner == Corner.Top || corner == Corner.None || corner == Corner.TopLeft || corner == Corner.TopRight)
				{
					float delta = Math.Abs(comp.AbsolutePosition.y - pos.z);
					if (delta < 10 && delta < besty)
					{
						//Debug.Log("!!!!" + pos + " -  " + comp.AbsolutePosition);

						changedPos.z = comp.AbsolutePosition.y;
						besty = delta;
						_line2P1 = new Vector3(Math.Min(comp.AbsolutePosition.xMin, control.AbsolutePosition.xMin), 0, changedPos.z);
						_line2P2 = new Vector3(Math.Max(comp.AbsolutePosition.xMax, control.AbsolutePosition.xMax), 0, changedPos.z);
					}
				}
				if (corner == Corner.Right || corner == Corner.None || corner == Corner.TopRight || corner == Corner.BottomRight)
				{
					float delta = Math.Abs(dif = comp.AbsolutePosition.xMax - (pos.x + _originalPosition.width));
					if (delta < 10 && delta < bestx)
					{
						changedPos.x = pos.x + dif;
						bestx = delta;
						_line1P1 = new Vector3(comp.AbsolutePosition.xMax, 0, Math.Min(comp.AbsolutePosition.yMin, control.AbsolutePosition.yMin));
						_line1P2 = new Vector3(comp.AbsolutePosition.xMax, 0, Math.Max(comp.AbsolutePosition.yMax, control.AbsolutePosition.yMax));
					}
				}
				if (corner == Corner.Bottom || corner == Corner.None || corner == Corner.BottomLeft || corner == Corner.BottomRight)
				{
					float delta = Math.Abs(dif = comp.AbsolutePosition.yMax - (pos.z + _originalPosition.height));
					if (delta < 10 && delta < besty)
					{
						changedPos.z = pos.z + dif;
						besty = delta;
						_line2P1 = new Vector3(Math.Min(comp.AbsolutePosition.xMin, control.AbsolutePosition.xMin), 0, comp.AbsolutePosition.yMax);
						_line2P2 = new Vector3(Math.Max(comp.AbsolutePosition.xMax, control.AbsolutePosition.xMax), 0, comp.AbsolutePosition.yMax);
					}
				}
			}
		}
		if (SnapToGrid)
		{
			if (bestx == float.MaxValue)
				changedPos.x = changedPos.x - (changedPos.x % Grid.x);
			if (besty == float.MaxValue)
				changedPos.z = changedPos.z - (changedPos.z % Grid.y);
		}
		return changedPos;
	}

	private Corner CornerStuff(Corner currentCorner, Corner corner, Rect rect, MouseCursor cursor)
	{
		EditorGUIUtility.AddCursorRect(rect, cursor);
		if (rect.Contains(Event.current.mousePosition))
		{
			return corner;
		}
		return currentCorner;
	}

	internal Rect ToGuiRect(Rect r)
	{
		Vector2 v = HandleUtility.WorldToGUIPoint(new Vector3(r.x, 0, r.y));
		Vector2 z = HandleUtility.WorldToGUIPoint(new Vector3(0, 0, 0));
		Vector2 s = HandleUtility.WorldToGUIPoint(new Vector3(r.width, 0, r.height));
		return new Rect(v.x, v.y, s.x - z.x, s.y - z.y);
	}

	internal Rect FromGuiRect(Rect r)
	{
		Vector2 v = HandleUtility.GUIPointToWorldRay(new Vector3(r.x, 0, r.y)).origin;
		Vector2 z = HandleUtility.GUIPointToWorldRay(new Vector3(0, 0, 0)).origin;
		Vector2 s = HandleUtility.GUIPointToWorldRay(new Vector3(r.width, 0, r.height)).origin;
		return new Rect(v.x, v.y, s.x - z.x, s.y - z.y);
	}

	private void DrawBorder(Color color, Rect cp)
	{
		Handles.color = color;
		float m = 1;
		Handles.DrawPolyLine(new Vector3[]
		                     	{
		                     		new Vector3(cp.xMin + m, 0, cp.yMin + m),
		                     		new Vector3(cp.xMax - m, 0, cp.yMin + m),
		                     		new Vector3(cp.xMax - m, 0, cp.yMax - m),
		                     		new Vector3(cp.xMin + m, 0, cp.yMax - m),
		                     		new Vector3(cp.xMin + m, 0, cp.yMin + m),
		                     	});
	}


	private BitControl GetCompUnderMouse(object[] comps)
	{
		Ray r = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
		Vector2 mousePosition = new Vector2(r.origin.x, r.origin.z);
		BitControl best = null;
		float bestDist = float.MaxValue;
		foreach (BitControl comp in comps)
		{
			if (comp.AbsolutePosition.Contains(mousePosition))
			{
				float mx = mousePosition.x;
				float my = mousePosition.y;
				float d = Math.Min(Math.Abs(comp.AbsolutePosition.xMin - mx), Math.Abs(comp.AbsolutePosition.xMax - mx));
				d = Math.Min(Math.Abs(comp.AbsolutePosition.yMin - my), d);
				d = Math.Min(Math.Abs(comp.AbsolutePosition.yMax - my), d);
				if (d < bestDist)
				{
					best = comp;
					bestDist = d;
				}
			}
		}
		return best;
	}

	private BitControl GetCompUnderMouseExcept(object[] comps, object except)
	{
		Ray r = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
		Vector2 mousePosition = new Vector2(r.origin.x, r.origin.z);
		BitControl best = null;
		float bestDist = float.MaxValue;
		foreach (BitControl comp in comps)
		{
			if (!comp.Equals(except) && comp.AbsolutePosition.Contains(mousePosition))
			{
				float mx = mousePosition.x;
				float my = mousePosition.y;
				float d = Math.Min(Math.Abs(comp.AbsolutePosition.xMin - mx), Math.Abs(comp.AbsolutePosition.xMax - mx));
				d = Math.Min(Math.Abs(comp.AbsolutePosition.yMin - my), d);
				d = Math.Min(Math.Abs(comp.AbsolutePosition.yMax - my), d);
				if (d < bestDist)
				{
					best = comp;
					bestDist = d;
				}
			}
		}
		return best;
	}
}


[CustomEditor(typeof(BitButton))]
public class BitButtonEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitBox))]
public class BitBoxEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitControl))]
public class BitControlEditor2 : BitControlEditor
{
}


[CustomEditor(typeof(BitLabel))]
public class BitLabelEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitPasswordField))]
public class BitPasswordFieldEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitRepeatButton))]
public class BitRepeatButtonEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitScrollView))]
public class BitScrollViewEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitTextArea))]
public class BitTextAreaEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitDrawTexture))]
public class BitDrawTextureEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitGroup))]
public class BitGroupEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitTextField))]
public class BitTextFieldEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitHorizontalScrollbar))]
public class BitHorizontalScrollbarEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitHorizontalSlider))]
public class BitHorizontalSliderEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitToggle))]
public class BitToggleEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitWindow))]
public class BitWindowEditor : BitControlEditor
{
	protected override void MakeAnchorEditor(BitControl control)
	{
	}
}


[CustomEditor(typeof(BitVerticalScrollbar))]
public class BitVerticalScrollbarEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitVerticalSlider))]
public class BitVerticalSliderEditor : BitControlEditor
{
}


[CustomEditor(typeof(BitList))]
public class BitListEditor : BitControlEditor
{
	//private bool _createDummyContent;

	protected override void MakeSpecificEditors(BitControl control)
	{
		//GUI.changed = false;
		//_createDummyContent = GUILayout.Toggle(_createDummyContent, "Create Dummy Content");

		//if (GUI.changed)
		//{
		//    BitList list = (BitList)control;
		//    if (_createDummyContent)
		//    {
		//        list.Model = new DefaultBitListModel();
		//        list.Populator = new DefaultPopulator();

		//        list.Model.Add("");
		//    }
		//    else
		//    {
		//        list.Model = null;
		//        list.Populator = null;
		//    }
		//}
	}
}

[CustomEditor(typeof(BitMenu))]
public class BitMenuEditor : BitControlEditor
{
}*/
